package colfer

import (
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

// GenerateJava writes the code into the respective ".java" files.
func GenerateJava(basedir string, packages []*Package) error {
	t := template.New("java-code").Delims("<:", ":>")
	template.Must(t.Parse(javaCode))

	for _, p := range packages {
		p.NameNative = strings.Replace(p.Name, "/", ".", -1)
	}

	for _, p := range packages {
		pkgdir, err := makePkgDir(p, basedir)
		if err != nil {
			return err
		}

		for _, s := range p.Structs {
			for _, f := range s.Fields {
				switch f.Type {
				default:
					if f.TypeRef == nil {
						f.TypeNative = f.Type
					} else {
						f.TypeNative = f.TypeRef.NameTitle()
						if f.TypeRef.Pkg != p {
							f.TypeNative = f.TypeRef.Pkg.NameNative + "." + f.TypeNative
						}
					}
				case "bool":
					f.TypeNative = "boolean"
				case "uint32", "int32":
					f.TypeNative = "int"
				case "uint64", "int64":
					f.TypeNative = "long"
				case "float32":
					f.TypeNative = "float"
				case "float64":
					f.TypeNative = "double"
				case "timestamp":
					f.TypeNative = "java.time.Instant"
				case "text":
					f.TypeNative = "String"
				case "binary":
					f.TypeNative = "byte[]"
				}
			}

			f, err := os.Create(filepath.Join(pkgdir, s.NameTitle()+".java"))
			if err != nil {
				return err
			}
			defer f.Close()

			if err := t.Execute(f, s); err != nil {
				return err
			}
		}
	}
	return nil
}

const javaCode = `package <:.Pkg.NameNative:>;


// This file was generated by colf(1); DO NOT EDIT


import static java.lang.String.format;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
<:- if .HasText:>
import java.nio.charset.StandardCharsets;
<:- end:>
import java.util.InputMismatchException;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;


/**
 * Data bean with built-in serialization support.
 * @author generated by colf(1)
 * @see <a href="https://github.com/pascaldekloe/colfer">Colfer's home</a>
 */
<:$class := .NameTitle:>public class <:$class:> implements java.io.Serializable {

	/** The upper limit for serial byte sizes. */
	public static int colferSizeMax = 16 * 1024 * 1024;
<:if .HasList:>
	/** The upper limit for the number of elements in a list. */
	public static int colferListMax = 64 * 1024;
<:- end:>

<:- range .Fields:>
<:- if eq .Type "binary":>
	private static final byte[] _zero<:.NameTitle:> = new byte[0];
<:- else if .TypeList:>
	private static final <:.TypeNative:>[] _zero<:.NameTitle:> = new <:.TypeNative:>[0];
<:- end:>
<:- end:>
<:range .Fields:>
	public <:.TypeNative:><:if .TypeList:>[]<:end:> <:.Name:>
<:- if .TypeList:> = _zero<:.NameTitle:>
<:- else if eq .Type "binary":> = _zero<:.NameTitle:>
<:- else if eq .Type "text":> = ""
<:- end:>;<:end:>


	/**
	 * {@link #reset(InputStream) Reusable} deserialization of Colfer streams.
	 */
	public static class Unmarshaller {

		/** The data source. */
		protected InputStream in;

		/** The read buffer. */
		protected byte[] buf;

		/** The {@link #buf buffer}'s data start index, inclusive. */
		protected int offset;

		/** The {@link #buf buffer}'s data end index, exclusive. */
		protected int i;


		/**
		 * @param in the data source or {@code null}.
		 * @param buf the initial buffer or {@code null}.
		 */
		public Unmarshaller(InputStream in, byte[] buf) {
			if (buf == null || buf.length == 0)
				buf = new byte[Math.min(<:$class:>.colferSizeMax, 2048)];
			this.buf = buf;
			reset(in);
		}

		/**
		 * Reuses the marshaller.
		 * @param in the data source or {@code null}.
		 * @throws IllegalStateException on pending data.
		 */
		public void reset(InputStream in) {
			if (this.i != this.offset) throw new IllegalStateException("colfer: pending data");
			this.in = in;
			this.offset = 0;
			this.i = 0;
		}

		/**
		 * Deserializes the following object.
		 * @return the result or {@code null} when EOF.
		 * @throws IOException from the input stream.
		 * @throws SecurityException on an upper limit breach defined by<:if .HasList:> either<:end:> {@link #colferSizeMax}<:if .HasList:> or {@link #colferListMax}<:end:>.
		 * @throws InputMismatchException when the data does not match this object's schema.
		 */
		public <:$class:> next() throws IOException {
			if (in == null) return null;

			while (true) {
				if (this.i > this.offset) {
					try {
						<:$class:> o = new <:$class:>();
						this.offset = o.unmarshal(this.buf, this.offset, this.i);
						return o;
					} catch (BufferUnderflowException e) {
					}
				}
				// not enough data

				if (this.i <= this.offset) {
					this.offset = 0;
					this.i = 0;
				} else if (i == buf.length) {
					byte[] src = this.buf;
					if (offset == 0) this.buf = new byte[Math.min(<:$class:>.colferSizeMax, this.buf.length * 4)];
					System.arraycopy(src, this.offset, this.buf, 0, this.i - this.offset);
					this.i -= this.offset;
					this.offset = 0;
				}
				assert this.i < this.buf.length;

				int n = in.read(buf, i, buf.length - i);
				if (n < 0) {
					if (this.i > this.offset)
						throw new InputMismatchException("colfer: pending data with EOF");
					return null;
				}
				assert n > 0;
				i += n;
			}
		}

	}


	/**
	 * Serializes the object.
<:- range .Fields:><:if .TypeList:>
	 * All {@code null} elements in {@link #<:.Name:>} will be replaced with <:if eq .Type "text":>{@code ""}<:else:>a {@code new} value<:end:>.
<:- end:><:end:>
	 * @param out the data destination.
	 * @param buf the initial buffer or {@code null}.
	 * @return the final buffer. When the serial fits into {@code buf} then the return is {@code buf}.
	 *  Otherwise the return is a new buffer, large enough to hold the whole serial.
	 * @throws IOException from {@code out}.
	 * @throws IllegalStateException on an upper limit breach defined by<:if .HasList:> either<:end:> {@link #colferSizeMax}<:if .HasList:> or {@link #colferListMax}<:end:>.
	 */
	public byte[] marshal(OutputStream out, byte[] buf) throws IOException {
		if (buf == null || buf.length == 0)
			buf = new byte[Math.min(<:$class:>.colferSizeMax, 2048)];

		while (true) {
			int i;
			try {
				i = marshal(buf, 0);
			} catch (BufferOverflowException e) {
				buf = new byte[Math.min(<:$class:>.colferSizeMax, buf.length * 4)];
				continue;
			}

			out.write(buf, 0, i);
			return buf;
		}
	}

	/**
	 * Serializes the object.
<:- range .Fields:><:if .TypeList:>
	 * All {@code null} elements in {@link #<:.Name:>} will be replaced with <:if eq .Type "text":>{@code ""}<:else:>a {@code new} value<:end:>.
<:- end:><:end:>
	 * @param buf the data destination.
	 * @param offset the initial index for {@code buf}, inclusive.
	 * @return the final index for {@code buf}, exclusive.
	 * @throws BufferOverflowException when {@code buf} is too small.
	 * @throws IllegalStateException on an upper limit breach defined by<:if .HasList:> either<:end:> {@link #colferSizeMax}<:if .HasList:> or {@link #colferListMax}<:end:>.
	 */
	public int marshal(byte[] buf, int offset) {
		int i = offset;

		try {
<:- range .Fields:><:if eq .Type "bool":>
			if (this.<:.Name:>) {
				buf[i++] = (byte) <:.Index:>;
			}
<:else if eq .Type "uint32":>
			if (this.<:.Name:> != 0) {
				int x = this.<:.Name:>;
				if ((x & ~((1 << 21) - 1)) != 0) {
					buf[i++] = (byte) (<:.Index:> | 0x80);
					buf[i++] = (byte) (x >>> 24);
					buf[i++] = (byte) (x >>> 16);
					buf[i++] = (byte) (x >>> 8);
					buf[i++] = (byte) (x);
				} else {
					buf[i++] = (byte) <:.Index:>;
					while (x > 0x7f) {
						buf[i++] = (byte) (x | 0x80);
						x >>>= 7;
					}
					buf[i++] = (byte) x;
				}
			}
<:else if eq .Type "uint64":>
			if (this.<:.Name:> != 0) {
				long x = this.<:.Name:>;
				if ((x & ~((1 << 49) - 1)) != 0) {
					buf[i++] = (byte) (<:.Index:> | 0x80);
					buf[i++] = (byte) (x >>> 56);
					buf[i++] = (byte) (x >>> 48);
					buf[i++] = (byte) (x >>> 40);
					buf[i++] = (byte) (x >>> 32);
					buf[i++] = (byte) (x >>> 24);
					buf[i++] = (byte) (x >>> 16);
					buf[i++] = (byte) (x >>> 8);
					buf[i++] = (byte) (x);
				} else {
					buf[i++] = (byte) <:.Index:>;
					while (x > 0x7fL) {
						buf[i++] = (byte) (x | 0x80);
						x >>>= 7;
					}
					buf[i++] = (byte) x;
				}
			}
<:else if eq .Type "int32":>
			if (this.<:.Name:> != 0) {
				int x = this.<:.Name:>;
				if (x < 0) {
					x = -x;
					buf[i++] = (byte) (<:.Index:> | 0x80);
				} else
					buf[i++] = (byte) <:.Index:>;
				while ((x & ~0x7f) != 0) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;
			}
<:else if eq .Type "int64":>
			if (this.<:.Name:> != 0) {
				long x = this.<:.Name:>;
				if (x < 0) {
					x = -x;
					buf[i++] = (byte) (<:.Index:> | 0x80);
				} else
					buf[i++] = (byte) <:.Index:>;
				for (int n = 0; n < 8 && (x & ~0x7fL) != 0; n++) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;
			}
<:else if eq .Type "float32":>
			if (this.<:.Name:> != 0.0f) {
				buf[i++] = (byte) <:.Index:>;
				int x = Float.floatToRawIntBits(this.<:.Name:>);
				buf[i++] = (byte) (x >>> 24);
				buf[i++] = (byte) (x >>> 16);
				buf[i++] = (byte) (x >>> 8);
				buf[i++] = (byte) (x);
			}
<:else if eq .Type "float64":>
			if (this.<:.Name:> != 0.0) {
				buf[i++] = (byte) <:.Index:>;
				long x = Double.doubleToRawLongBits(this.<:.Name:>);
				buf[i++] = (byte) (x >>> 56);
				buf[i++] = (byte) (x >>> 48);
				buf[i++] = (byte) (x >>> 40);
				buf[i++] = (byte) (x >>> 32);
				buf[i++] = (byte) (x >>> 24);
				buf[i++] = (byte) (x >>> 16);
				buf[i++] = (byte) (x >>> 8);
				buf[i++] = (byte) (x);
			}
<:else if eq .Type "timestamp":>
			if (this.<:.Name:> != null) {
				long s = this.<:.Name:>.getEpochSecond();
				int ns = this.<:.Name:>.getNano();
				if (s != 0 || ns != 0) {
					if (s >= 0 && s < (1L << 32)) {
						buf[i++] = (byte) <:.Index:>;
						buf[i++] = (byte) (s >>> 24);
						buf[i++] = (byte) (s >>> 16);
						buf[i++] = (byte) (s >>> 8);
						buf[i++] = (byte) (s);
						buf[i++] = (byte) (ns >>> 24);
						buf[i++] = (byte) (ns >>> 16);
						buf[i++] = (byte) (ns >>> 8);
						buf[i++] = (byte) (ns);
					} else {
						buf[i++] = (byte) (<:.Index:> | 0x80);
						buf[i++] = (byte) (s >>> 56);
						buf[i++] = (byte) (s >>> 48);
						buf[i++] = (byte) (s >>> 40);
						buf[i++] = (byte) (s >>> 32);
						buf[i++] = (byte) (s >>> 24);
						buf[i++] = (byte) (s >>> 16);
						buf[i++] = (byte) (s >>> 8);
						buf[i++] = (byte) (s);
						buf[i++] = (byte) (ns >>> 24);
						buf[i++] = (byte) (ns >>> 16);
						buf[i++] = (byte) (ns >>> 8);
						buf[i++] = (byte) (ns);
					}
				}
			}
<:else if eq .Type "text":>
 <:- if .TypeList:>
			if (this.<:.Name:>.length != 0) {
				buf[i++] = (byte) <:.Index:>;
				String[] a = this.<:.Name:>;

				int x = a.length;
				if (x > <:$class:>.colferListMax)
					throw new IllegalStateException(format("colfer: field <:.String:> length %d exceeds %d elements", x, <:$class:>.colferListMax));
				while (x > 0x7f) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;

				for (int ai = 0; ai < a.length; ai++) {
					String s = a[ai];
					if (s == null) {
						s = "";
						a[ai] = s;
					}

					int start = ++i;

					for (int sIndex = 0, sLength = s.length(); sIndex < sLength; sIndex++) {
						char c = s.charAt(sIndex);
						if (c < '\u0080') {
							buf[i++] = (byte) c;
						} else if (c < '\u0800') {
							buf[i++] = (byte) (192 | c >>> 6);
							buf[i++] = (byte) (128 | c & 63);
						} else if (c < '\ud800' || c > '\udfff') {
							buf[i++] = (byte) (224 | c >>> 12);
							buf[i++] = (byte) (128 | c >>> 6 & 63);
							buf[i++] = (byte) (128 | c & 63);
						} else {
							int cp = 0;
							if (++sIndex < sLength) cp = Character.toCodePoint(c, s.charAt(sIndex));
							if ((cp >= 1 << 16) && (cp < 1 << 21)) {
								buf[i++] = (byte) (240 | cp >>> 18);
								buf[i++] = (byte) (128 | cp >>> 12 & 63);
								buf[i++] = (byte) (128 | cp >>> 6 & 63);
								buf[i++] = (byte) (128 | cp & 63);
							} else
								buf[i++] = (byte) '?';
						}
					}
					int size = i - start;
					if (size > <:$class:>.colferSizeMax)
						throw new IllegalStateException(format("colfer: field <:.String:> size %d exceeds %d UTF-8 bytes", size, <:$class:>.colferSizeMax));

					int ii = start - 1;
					if (size > 0x7f) {
						i++;
						for (int y = size; y >= 1 << 14; y >>>= 7) i++;
						System.arraycopy(buf, start, buf, i - size, size);

						do {
							buf[ii++] = (byte) (size | 0x80);
							size >>>= 7;
						} while (size > 0x7f);
					}
					buf[ii] = (byte) size;
				}
			}
 <:- else:>
			if (! this.<:.Name:>.isEmpty()) {
				buf[i++] = (byte) <:.Index:>;
				int start = ++i;

				String s = this.<:.Name:>;
				for (int sIndex = 0, sLength = s.length(); sIndex < sLength; sIndex++) {
					char c = s.charAt(sIndex);
					if (c < '\u0080') {
						buf[i++] = (byte) c;
					} else if (c < '\u0800') {
						buf[i++] = (byte) (192 | c >>> 6);
						buf[i++] = (byte) (128 | c & 63);
					} else if (c < '\ud800' || c > '\udfff') {
						buf[i++] = (byte) (224 | c >>> 12);
						buf[i++] = (byte) (128 | c >>> 6 & 63);
						buf[i++] = (byte) (128 | c & 63);
					} else {
						int cp = 0;
						if (++sIndex < sLength) cp = Character.toCodePoint(c, s.charAt(sIndex));
						if ((cp >= 1 << 16) && (cp < 1 << 21)) {
							buf[i++] = (byte) (240 | cp >>> 18);
							buf[i++] = (byte) (128 | cp >>> 12 & 63);
							buf[i++] = (byte) (128 | cp >>> 6 & 63);
							buf[i++] = (byte) (128 | cp & 63);
						} else
							buf[i++] = (byte) '?';
					}
				}
				int size = i - start;
				if (size > <:$class:>.colferSizeMax)
					throw new IllegalStateException(format("colfer: field <:.String:> size %d exceeds %d UTF-8 bytes", size, <:$class:>.colferSizeMax));

				int ii = start - 1;
				if (size > 0x7f) {
					i++;
					for (int x = size; x >= 1 << 14; x >>>= 7) i++;
					System.arraycopy(buf, start, buf, i - size, size);

					do {
						buf[ii++] = (byte) (size | 0x80);
						size >>>= 7;
					} while (size > 0x7f);
				}
				buf[ii] = (byte) size;
			}
 <:- end:>
<:else if eq .Type "binary":>
			if (this.<:.Name:>.length != 0) {
				buf[i++] = (byte) <:.Index:>;

				int size = this.<:.Name:>.length;
				if (size > <:$class:>.colferSizeMax)
					throw new IllegalStateException(format("colfer: field <:.String:> size %d exceeds %d bytes", size, <:$class:>.colferSizeMax));

				int x = size;
				while (x > 0x7f) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;

				int start = i;
				i += size;
				System.arraycopy(this.<:.Name:>, 0, buf, start, size);
			}
<:else if .TypeList:>
			if (this.<:.Name:>.length != 0) {
				buf[i++] = (byte) <:.Index:>;
				<:.TypeNative:>[] a = this.<:.Name:>;

				int x = a.length;
				if (x > <:$class:>.colferListMax)
					throw new IllegalStateException(format("colfer: field <:.String:> length %d exceeds %d elements", x, <:$class:>.colferListMax));
				while (x > 0x7f) {
					buf[i++] = (byte) (x | 0x80);
					x >>>= 7;
				}
				buf[i++] = (byte) x;

				for (int ai = 0; ai < a.length; ai++) {
					<:.TypeNative:> o = a[ai];
					if (o == null) {
						o = new <:.TypeNative:>();
						a[ai] = o;
					}
					i = o.marshal(buf, i);
				}
			}
<:else:>
			if (this.<:.Name:> != null) {
				buf[i++] = (byte) <:.Index:>;
				i = this.<:.Name:>.marshal(buf, i);
			}
<:end:><:end:>
			buf[i++] = (byte) 0x7f;
			return i;
		} catch (ArrayIndexOutOfBoundsException e) {
			if (i - offset > <:$class:>.colferSizeMax)
				throw new IllegalStateException(format("colfer: serial exceeds %d bytes", <:$class:>.colferSizeMax));
			if (i > buf.length) throw new BufferOverflowException();
			throw e;
		}
	}

	/**
	 * Deserializes the object.
	 * @param buf the data source.
	 * @param offset the initial index for {@code buf}, inclusive.
	 * @return the final index for {@code buf}, exclusive.
	 * @throws BufferUnderflowException when {@code buf} is incomplete. (EOF)
	 * @throws SecurityException on an upper limit breach defined by<:if .HasList:> either<:end:> {@link #colferSizeMax}<:if .HasList:> or {@link #colferListMax}<:end:>.
	 * @throws InputMismatchException when the data does not match this object's schema.
	 */
	public int unmarshal(byte[] buf, int offset) {
		return unmarshal(buf, offset, buf.length);
	}

	/**
	 * Deserializes the object.
	 * @param buf the data source.
	 * @param offset the initial index for {@code buf}, inclusive.
	 * @param end the index limit for {@code buf}, exclusive.
	 * @return the final index for {@code buf}, exclusive.
	 * @throws BufferUnderflowException when {@code buf} is incomplete. (EOF)
	 * @throws SecurityException on an upper limit breach defined by<:if .HasList:> either<:end:> {@link #colferSizeMax}<:if .HasList:> or {@link #colferListMax}<:end:>.
	 * @throws InputMismatchException when the data does not match this object's schema.
	 */
	public int unmarshal(byte[] buf, int offset, int end) {
		if (end > buf.length) end = buf.length;
		int i = offset;

		try {
			byte header = buf[i++];
<:range .Fields:><:if eq .Type "bool":>
			if (header == (byte) <:.Index:>) {
				this.<:.Name:> = true;
				header = buf[i++];
			}
<:else if eq .Type "uint32":>
			if (header == (byte) <:.Index:>) {
				int x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					x |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				this.<:.Name:> = x;
				header = buf[i++];
			} else if (header == (byte) (<:.Index:> | 0x80)) {
				this.<:.Name:> = (buf[i++] & 0xff) << 24 | (buf[i++] & 0xff) << 16 | (buf[i++] & 0xff) << 8 | (buf[i++] & 0xff);
				header = buf[i++];
			}
<:else if eq .Type "uint64":>
			if (header == (byte) <:.Index:>) {
				long x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					if (shift == 56 || b >= 0) {
						x |= (b & 0xffL) << shift;
						break;
					}
					x |= (b & 0x7fL) << shift;
				}
				this.<:.Name:> = x;
				header = buf[i++];
			} else if (header == (byte) (<:.Index:> | 0x80)) {
				this.<:.Name:> = (buf[i++] & 0xffL) << 56 | (buf[i++] & 0xffL) << 48 | (buf[i++] & 0xffL) << 40 | (buf[i++] & 0xffL) << 32
					| (buf[i++] & 0xffL) << 24 | (buf[i++] & 0xffL) << 16 | (buf[i++] & 0xffL) << 8 | (buf[i++] & 0xffL);
				header = buf[i++];
			}
<:else if eq .Type "int32":>
			if (header == (byte) <:.Index:>) {
				int x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					x |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				this.<:.Name:> = x;
				header = buf[i++];
			} else if (header == (byte) (<:.Index:> | 0x80)) {
				int x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					x |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				this.<:.Name:> = -x;
				header = buf[i++];
			}
<:else if eq .Type "int64":>
			if (header == (byte) <:.Index:>) {
				long x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					if (shift == 56 || b >= 0) {
						x |= (b & 0xffL) << shift;
						break;
					}
					x |= (b & 0x7fL) << shift;
				}
				this.<:.Name:> = x;
				header = buf[i++];
			} else if (header == (byte) (<:.Index:> | 0x80)) {
				long x = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					if (shift == 56 || b >= 0) {
						x |= (b & 0xffL) << shift;
						break;
					}
					x |= (b & 0x7fL) << shift;
				}
				this.<:.Name:> = -x;
				header = buf[i++];
			}
<:else if eq .Type "float32":>
			if (header == (byte) <:.Index:>) {
				int x = (buf[i++] & 0xff) << 24 | (buf[i++] & 0xff) << 16 | (buf[i++] & 0xff) << 8 | (buf[i++] & 0xff);
				this.<:.Name:> = Float.intBitsToFloat(x);
				header = buf[i++];
			}
<:else if eq .Type "float64":>
			if (header == (byte) <:.Index:>) {
				long x = (buf[i++] & 0xffL) << 56 | (buf[i++] & 0xffL) << 48 | (buf[i++] & 0xffL) << 40 | (buf[i++] & 0xffL) << 32
					| (buf[i++] & 0xffL) << 24 | (buf[i++] & 0xffL) << 16 | (buf[i++] & 0xffL) << 8 | (buf[i++] & 0xffL);
				this.<:.Name:> = Double.longBitsToDouble(x);
				header = buf[i++];
			}
<:else if eq .Type "timestamp":>
			if (header == (byte) <:.Index:>) {
				long s = (buf[i++] & 0xffL) << 24 | (buf[i++] & 0xffL) << 16 | (buf[i++] & 0xffL) << 8 | (buf[i++] & 0xffL);
				long ns = (buf[i++] & 0xffL) << 24 | (buf[i++] & 0xffL) << 16 | (buf[i++] & 0xffL) << 8 | (buf[i++] & 0xffL);
				this.<:.Name:> = java.time.Instant.ofEpochSecond(s, ns);
				header = buf[i++];
			} else if (header == (byte) (<:.Index:> | 0x80)) {
				long s = (buf[i++] & 0xffL) << 56 | (buf[i++] & 0xffL) << 48 | (buf[i++] & 0xffL) << 40 | (buf[i++] & 0xffL) << 32
					| (buf[i++] & 0xffL) << 24 | (buf[i++] & 0xffL) << 16 | (buf[i++] & 0xffL) << 8 | (buf[i++] & 0xffL);
				long ns = (buf[i++] & 0xffL) << 24 | (buf[i++] & 0xffL) << 16 | (buf[i++] & 0xffL) << 8 | (buf[i++] & 0xffL);
				this.<:.Name:> = java.time.Instant.ofEpochSecond(s, ns);
				header = buf[i++];
			}
<:else if eq .Type "text":>
			if (header == (byte) <:.Index:>) {
 <:- if .TypeList:>
				int length = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					length |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (length > <:$class:>.colferListMax)
					throw new SecurityException(format("colfer: field <:.String:> length %d exceeds %d elements", length, <:$class:>.colferListMax));

				<:.TypeNative:>[] a = new <:.TypeNative:>[length];
				for (int ai = 0; ai < length; ai++) {
					int size = 0;
					for (int shift = 0; true; shift += 7) {
						byte b = buf[i++];
						size |= (b & 0x7f) << shift;
						if (shift == 28 || b >= 0) break;
					}
					if (size > <:$class:>.colferSizeMax)
						throw new SecurityException(format("colfer: field <:.String:> size %d exceeds %d UTF-8 bytes", size, <:$class:>.colferSizeMax));

					int start = i;
					i += size;
					a[ai] = new String(buf, start, size, StandardCharsets.UTF_8);
				}
				this.<:.Name:> = a;
 <:- else:>
				int size = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					size |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (size > <:$class:>.colferSizeMax)
					throw new SecurityException(format("colfer: field <:.String:> size %d exceeds %d UTF-8 bytes", size, <:$class:>.colferSizeMax));

				int start = i;
				i += size;
				this.<:.Name:> = new String(buf, start, size, StandardCharsets.UTF_8);
 <:- end:>
				header = buf[i++];
			}
<:else if eq .Type "binary":>
			if (header == (byte) <:.Index:>) {
				int size = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					size |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (size > <:$class:>.colferSizeMax)
					throw new SecurityException(format("colfer: field <:.String:> size %d exceeds %d bytes", size, <:$class:>.colferSizeMax));

				this.<:.Name:> = new byte[size];
				int start = i;
				i += size;
				System.arraycopy(buf, start, this.<:.Name:>, 0, size);
				header = buf[i++];
			}
<:else if .TypeList:>
			if (header == (byte) <:.Index:>) {
				int length = 0;
				for (int shift = 0; true; shift += 7) {
					byte b = buf[i++];
					length |= (b & 0x7f) << shift;
					if (shift == 28 || b >= 0) break;
				}
				if (length > <:$class:>.colferListMax)
					throw new SecurityException(format("colfer: field <:.String:> length %d exceeds %d elements", length, <:$class:>.colferListMax));

				<:.TypeNative:>[] a = new <:.TypeNative:>[length];
				for (int ai = 0; ai < length; ai++) {
					<:.TypeNative:> o = new <:.TypeNative:>();
					i = o.unmarshal(buf, i, end);
					a[ai] = o;
				}
				this.<:.Name:> = a;
				header = buf[i++];
			}
<:else:>
			if (header == (byte) <:.Index:>) {
				this.<:.Name:> = new <:.TypeNative:>();
				i = this.<:.Name:>.unmarshal(buf, i, end);
				header = buf[i++];
			}
<:end:><:end:>
			if (header != (byte) 0x7f)
				throw new InputMismatchException(format("colfer: unknown header at byte %d", i - 1));
		} finally {
			if (i > end && end - offset < <:$class:>.colferSizeMax) throw new BufferUnderflowException();
			if (i - offset > <:$class:>.colferSizeMax)
				throw new SecurityException(format("colfer: serial exceeds %d bytes", <:$class:>.colferSizeMax));
			if (i > end) throw new BufferUnderflowException();
		}

		return i;
	}
<:range .Fields:>
	public <:.TypeNative:><:if .TypeList:>[]<:end:> get<:.NameTitle:>() {
		return this.<:.Name:>;
	}

	public void set<:.NameTitle:>(<:.TypeNative:><:if .TypeList:>[]<:end:> value) {
		this.<:.Name:> = value;
	}
<:end:>
	@Override
	public final int hashCode() {
		int h = 1;
<:- range .Fields:>
<:- if .TypeList:>
		for (<:.TypeNative:> o : this.<:.Name:>) h = 31 * h + (o == null ? 0 : o.hashCode());
<:- else if eq .Type "bool":>
		h = 31 * h + (this.<:.Name:> ? 1231 : 1237);
<:- else if eq .Type "uint32" "int32":>
		h = 31 * h + this.<:.Name:>;
<:- else if eq .Type "uint64" "int64":>
		h = 31 * h + (int)(this.<:.Name:> ^ this.<:.Name:> >>> 32);
<:- else if eq .Type "float32":>
		h = 31 * h + Float.floatToIntBits(this.<:.Name:>);
<:- else if eq .Type "float64":>
		long _<:.Name:>Bits = Double.doubleToLongBits(this.<:.Name:>);
		h = 31 * h + (int) (_<:.Name:>Bits ^ _<:.Name:>Bits >>> 32);
<:- else if eq .Type "binary":>
		for (byte b : this.<:.Name:>) h = 31 * h + b;
<:- else:>
		if (this.<:.Name:> != null) h = 31 * h + this.<:.Name:>.hashCode();
<:- end:><:end:>
		return h;
	}

	@Override
	public final boolean equals(Object o) {
		return o instanceof <:$class:> && equals((<:$class:>) o);
	}

	public final boolean equals(<:$class:> o) {
		return o != null && o.getClass() == <:$class:>.class
<:- range .Fields:>
<:- if eq .Type "bool" "uint32" "uint64" "int32" "int64":>
			&& this.<:.Name:> == o.<:.Name:>
<:- else if eq .Type "float32" "float64":>
			&& (this.<:.Name:> == o.<:.Name:> || (this.<:.Name:> != this.<:.Name:> && o.<:.Name:> != o.<:.Name:>))
<:- else if eq .Type "binary":>
			&& java.util.Arrays.equals(this.<:.Name:>, o.<:.Name:>)
<:- else if .TypeList:>
			&& java.util.Arrays.equals(this.<:.Name:>, o.<:.Name:>)
<:- else:>
			&& this.<:.Name:> == null ? o.<:.Name:> == null : this.<:.Name:>.equals(o.<:.Name:>)
<:- end:><:end:>;
	}

}
`
